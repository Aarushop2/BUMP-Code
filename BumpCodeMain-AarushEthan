
/*  BUMP Project
 *  By Aarush Kandukoori and Ethan Gracias
 *  Getting_BPM_to_Monitor prints the BPM to the Serial Monitor, using the least lines of code and PulseSensor Library.
 *  Tutorial Webpage: https://pulsesensor.com/pages/getting-advanced
 *
--------Use This Sketch To------------------------------------------
1) Displays user's live and changing BPM, Beats Per Minute, in Arduino's native Serial Monitor.
2) Print: "♥  A HeartBeat Happened !" when a beat is detected, live.
2) Learn about using a PulseSensor Library "Object".
4) Blinks the builtin LED with user's Heartbeat.
--------------------------------------------------------------------*/
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for SSD1306 display connected using I2C
#define OLED_RESET     -1 // Reset pin # (or -1 if sharing Arduino reset pin)
#define SCREEN_ADDRESS 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Declaration for SSD1306 display connected using software SPI:
//#define OLED_MOSI   9
//#define OLED_CLK   10
//#define OLED_DC    11
//#define OLED_CS    12
//#define OLED_RESET 13
//Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, OLED_MOSI, OLED_CLK, OLED_DC, OLED_RESET, OLED_CS);

#define USE_ARDUINO_INTERRUPTS true    // Set-up low-level interrupts for most acurate BPM math.
#include <PulseSensorPlayground.h>     // Includes the PulseSensorPlayground Library.   

//  Variables
const int PulseWire = 0;       // PulseSensor PURPLE WIRE connected to ANALOG PIN 0
const int LED = 12;          // The on-board Arduino LED, close to PIN 13.
int Threshold = 400;//550;// Use the "Gettting Started Project" to fine-tune Threshold Value beyond default setting.
int HEARTRATEISLOW=60; //Below this heart rate will trigger motor and led light
                               
int PUMPPIN=8;//Motor Pin
                               
PulseSensorPlayground pulseSensor;  // Creates an instance of the PulseSensorPlayground object called "pulseSensor"

void setup() {   

  Serial.begin(9600);          // For Serial Monitor
  Serial.println(F("BUMP2 initializing"));
  pinMode(LED,OUTPUT);
  pinMode(PUMPPIN,OUTPUT);
  //OLED not working, hence commented all related code, uncomment when working oled is connected  
  // initialize the OLED object
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  drawfillcircle();//shows some animation for fun
  drawInitScreen();//displays init screen

  // Configure the PulseSensor object, by assigning our variables to it. 
  pulseSensor.analogInput(PulseWire);   
  //pulseSensor.blinkOnPulse(LED);       //auto-magically blink Arduino's LED with heartbeat.
  pulseSensor.setThreshold(Threshold);   

  // Double-check the "pulseSensor" object was created and "began" seeing a signal. 
   if (pulseSensor.begin()) {
    Serial.println("We created a pulseSensor Object !");  //This prints one time at Arduino power-up,  or on Arduino reset.  
  }
  else
  {
    Serial.println("Could not create pulseSensor Object !");
  }
   
}

void drawInitScreen()
{
  display.clearDisplay();
 // Display Text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0,28);
  display.println("Initializing BUMP2!");
  display.display();
  delay(2000);
  display.clearDisplay();
}
void ShowSensorValue(int txtToDisplay, bool highBPM)
{
  // Display Numbers
  display.clearDisplay();
  
  display.setCursor(0,28);
  if(highBPM)
  {
    display.setTextSize(3);
    display.setTextColor(SSD1306_INVERSE);
  }
  else
  {
    display.setTextSize(2);
    display.setTextColor(WHITE);
  }
  display.print("BPM:");
  display.println(txtToDisplay);
  Serial.println(txtToDisplay);
  display.display();
  delay(2000);
}
void drawfillcircle(void) {
  display.clearDisplay();

  for(int16_t i=max(display.width(),display.height())/2; i>0; i-=3) {
    // The INVERSE color is used so circles alternate white/black
    display.fillCircle(display.width() / 2, display.height() / 2, i, SSD1306_INVERSE);
    display.display(); // Update screen with each newly-drawn circle
    delay(1);
  }

  delay(2000);
}


void loop() {
if (pulseSensor.sawStartOfBeat()) {            // Constantly test to see if "a beat happened".
  int myBPM = pulseSensor.getBeatsPerMinute();  // Calls function on our pulseSensor object that returns BPM as an "int".
                                               // "myBPM" hold this BPM value now. 
  Serial.println("♥  A HeartBeat Happened ! "); // If test is "true", print a message "a heartbeat happened".
  Serial.print("BPM: ");                        // Print phrase "BPM: " 
  Serial.println(myBPM);    // Print the value inside of myBPM. 
  if(myBPM < HEARTRATEISLOW){    
    Serial.println("Heart rate is low");    
    ShowSensorValue(myBPM,true);//shows value on screen
 
    digitalWrite(LED,HIGH);
     //start pump for 5secs           
    digitalWrite(PUMPPIN,HIGH);   
    //analogWrite(PUMPPIN, 50);
    delay(5000); 
    //analogWrite(PUMPPIN,0);
    digitalWrite(PUMPPIN,LOW);  
    //Instead of the above, put code that turns on pump and/or beeps etc
   } else {
      ShowSensorValue(myBPM,false);
      digitalWrite(LED,false);                //  Else, the sigal must be below "550", so "turn-off" this LED.
   }
 }
 else
 {
  //Serial.println("no beat detected");
 }

  delay(20);                    // considered best practice in a simple sketch.

}

  
